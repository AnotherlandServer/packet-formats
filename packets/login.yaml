# yaml-language-server: $schema=../otherland.packet.schema.yaml

packets:
  CPktLogin:
    id: 0x1b
    subId: 0x00
    inherit: CPkt
    description: >
      This packet is sent by the client to initiate the login sequence.
    relatesTo:
      - CPktLoginResult
    fields:
      - name: username
        type: { name: cstring, maxlen: 256}
      - name: password
        type: { name: cstring, maxlen: 128 }
      - name: steamId
        type: { name: cstring, maxlen: 64 } 
        description: > 
          (Unverified) Steam id used for authenticating the steamworks sdk.. 
      - type: u32
      - type: bool
      - name: magicBytes
        type: { name: array, len: 16, type: u8 }
        description: >
          A seemingly unstructured 128-bit value present in several "initiation"
          packets like login. Might be some kind of additional token used for
          authentication or session verification.
      - name: systemInfo
        type: { name: array, len: 30, type: wstring }
        description: >
          A list of several system parameters like os version, 
          hardware and network interfaces among others.
      - type: u32
      - type: u32
      - type: u32
      - type: u32
      - type: u16
      - type: u32
      - type: u64
      - type: u16
      - type: u32
      - name: steamAuthenticationToken
        type: { name: cstring, maxlen: 1024} # this might be a steam authentication token
        description: >
          (Unverified) Steam authentication token for authenticating the steamworks sdk.
      - type: u32
      - type: cstring
      - type: cstring
      - type: cstring
  CPktLoginResult:
    id: 0x22
    subId: 0x00
    inherit: CPkt
    description: >
      The result of a login request, either successfull or unsuccessfull as indicated by `loginSuccess`.
    relatesTo:
      - CPktLogin
    fields:
      - name: loginSuccess
        type: bool
      - name: uiState
        type: 
          name: u32
          enum:
            1: realmSelection
            2: characterSelection
            3: unknown3
            4: unknown4
        description: >
          This instructs the client about which ui state to switch to
          after login.
            - Values of 3 or 4 trigger the readout of unknownString and a call to further yet undecoded functions.
              The function is which is yet unknown.
            - A value of 1 opens the realm selection.
            - A value of 2 opens the character selection, after connecting to the realm indicated by realmIp and realmPort.
      - branch:
          field: loginSuccess
          isTrue:
            fields:
            - type: bool
            - name: realmId
              type: u32
            - name: realmIp # ip of realm server to connect to after login
              type: u32
            - name: realmPort # port of realm server to connect to after login
              type: u16
            - type: u32
            - name: unknownString
              type: cstring
            - name: magicBytes
              type: { name: array, len: 16, type: u8 }
              description: >
                A seemingly unstructured 128-bit value present in several "initiation"
                packets like login. Might be some kind of additional token used for
                authentication or session verification.
            - name: userId
              type: u32
            - name: username
              type: cstring
            - name: sessionId
              type: uuid
              description: >
                Session uuid generated by the server. The client will use it 
                to authenticated with followup servers, such as realm and cluster 
                servers.
          isFalse:
            fields:
            - name: messageLen
              type: u8
            - name: message
              type: { name: array, len: messageLen, type: u8 }
              description: >
                For some strange reason, the message format is not using a
                string type here, despite expecting an ascii sequence in `message` of length
                `messageLen`.
                You can send localized string sequences to indicate why the login failed. 
                For example:
                  - #Login.ERROR_PASSWORDMISMATCH#
                  - #Login.ERROR_BANNED#
                  - #Login.ERROR_SERVERSLOCKED#
            - name: unknownStringArrayLength
              type: u16
            - type: { name: array, len: unknownStringArrayLength, type: cstring }